<?php

namespace jis\a2\model;

/**
 * Class UserAccountModel handles authenticating a user
 * @package jis\a2\model
 * @author Isaac Clancy, Junyi Chen, Sven Gerhards
 */
class UserAccountModel extends Model
{
    /**
     * @var int $id User ID, auto generated by database
     */
    private $id;

    /**
     * @var string Name, used to login
     */
    private $name;

    /**
     * @var string Hash of user password
     */
    private $password;

    /**
     * @var string the email address of the user
     */
    private $email;

    /**
     * Loads the user account with the given id
     * @param $id int The account id
     * @return $this UserAccountModel The loaded account if successful, null otherwise
     */
    public function loadByID(int $id): ?UserAccountModel
    {
        //query the database
        if (!$result = $this->db->query("SELECT `name`, `password`, `email` FROM `user_accounts` WHERE `id`=$id;")) {
            die($this->db->error);
        }

        $data = $result->fetch_assoc();
        if ($data === null) {
            return null;
        }

        $this->name = $data['name'];
        $this->password = $data['password'];
        $this->email = $data['email'];
        $this->id = $id;

        return $this;
    }

    /**
     * Loads the user account with the given name and password.
     * The password should be hashed already.
     * @param $name string The account name
     * @param $password string The account password
     * @return UserAccountModel An account if the account exists, null otherwise
     */
    public function loadByNameAndPassword(string $name, string $password): ?UserAccountModel
    {
        if (!$selectAccountByNameAndPassword = $this->db->prepare(
            "SELECT `id`, `email` FROM `user_accounts` WHERE `name`=? AND `password`=?;"
        )) {
            die($this->db->error);
        }
        $selectAccountByNameAndPassword->bind_param("ss", $name, $password);
        if (!$result = $selectAccountByNameAndPassword->execute()) {
            $selectAccountByNameAndPassword->close();
            die($this->db->error);
        }
        $selectAccountByNameAndPassword->bind_result($id, $email);
        if ($selectAccountByNameAndPassword->fetch()) {
            $this->name = $name;
            $this->password = $password;
            $this->email = $email;
            $this->id = $id;

            $selectAccountByNameAndPassword->close();
            return $this;
        }
        $selectAccountByNameAndPassword->close();
        return null;
    }

    /**
     * Loads the user account with the given name.
     * @param $name string The account name
     * @return UserAccountModel An account if the account exists, null otherwise
     */
    public function loadByName(string $name): ?UserAccountModel
    {
        if (!$selectAccountByName = $this->db->prepare(
            "SELECT `id`, `password`, `email` FROM `user_accounts` WHERE `name`=?;"
        )) {
            die($this->db->error);
        }
        $selectAccountByName->bind_param("s", $name);
        if (!$result = $selectAccountByName->execute()) {
            $selectAccountByName->close();
            // throw new ...
            die($this->db->error);
        }

        $selectAccountByName->bind_result($id, $password, $email);
        $result = $selectAccountByName->fetch();
        $selectAccountByName->close();
        if ($result) {
            $this->name = $name;
            $this->password = $password;
            $this->email = $email;
            $this->id = $id;

            return $this;
        }
        return null;
    }

    /**
     * Saves user account information to the database. Creates an id if the account doesn't have one already.
     * name and password must not be null.
     * @return $this UserAccountModel
     */
    public function save(): UserAccountModel
    {
        $name = $this->name;
        $password = $this->password;
        $email = $this->email;
        if (!isset($this->id)) {
            if (!$stm = $this->db->prepare("INSERT INTO `user_accounts`(`name`, `password`, `email`) VALUES(?, ?, ?)")) {
                die($this->db->error);
            }
            $stm->bind_param("sss", $name, $password, $email);
            $result = $stm->execute();
            $stm->close();
            if (!$result) {
                die($this->db->error);
            }
            $this->id = $this->db->insert_id;
        } else {
            // saving existing account - perform UPDATE
            if (!$stm = $this->db->prepare("UPDATE `user_accounts` SET `name`=?, `password`=?, `email`=? WHERE `id`=?;")) {
                die($this->db->error);
            }
            $stm->bind_param("sssi", $name, $password, $email, $this->id);
            $result = $stm->execute();
            $stm->close();
            if (!$result) {
                die($this->db->error);
            }
        }

        return $this;
    }

    /**
     * Gets the account password
     * @return string A hash of the account password
     */
    public function getPassword(): ?string
    {
        return $this->password;
    }

    /**
     * Sets the account password
     * @param string $password A hash of the account password
     */
    public function setPassword(string $password): void
    {
        $this->password = $password;
    }

    /**
     * Gets the account name
     * @return string The account name
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets the account name
     * @param string $name The new account name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getEmail(): string
    {
        return $this->email;
    }

    public function setEmail(string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns a unique id for the account. The account must have been saved to have an id.
     * @return int
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Gets all the bank accounts for this user
     * @return \Generator|BankAccountModel[] Accounts
     */
    public function getBankAccounts(): \Generator
    {
        if (!$result = $this->db->query(
            "SELECT `id` FROM `bank_accounts` WHERE bank_accounts.userID=$this->id;"
        )) {
            die($this->db->error);
        }
        $accountIds = array_column($result->fetch_all(), 0);
        foreach ($accountIds as $id) {
            // Use a generator to save on memory/resources
            // load accounts from DB one at a time only when required
            yield (new BankAccountModel())->load($id);
        }
    }

    /**
     * @param int $bankAccountID
     * @return BankAccountModel|null The users's bank account if successful, null otherwise
     */
    public function getBankAccountByID(int $bankAccountID): ?BankAccountModel
    {
        if (!$result = $this->db->query(
            "SELECT `id` FROM `bank_accounts` WHERE bank_accounts.userID=$this->id 
                AND bank_accounts.id=$bankAccountID;"
        )) {
            die($this->db->error);
        }
        return $result->num_rows == 1 ? (new BankAccountModel())->load($bankAccountID) : null;
    }

    /**
     * Gets all transactions made with this user
     */
    public function getTransactions(): \Generator
    {
        if (!$result = $this->db->query("SELECT `id` FROM `transactions` WHERE `userID`=$this->id;")) {
            die($this->db->error);
        }
        $transactionIds = array_column($result->fetch_all(), 0);
        foreach ($transactionIds as $id) {
            // Use a generator to save on memory/resources
            // load accounts from DB one at a time only when required
            yield (new TransactionModel())->loadByID($id);
        }
    }
}
